services:
  emqx:
    image: emqx:5
    ports:
      - "1883:1883"
      - "18083:18083"
    networks:
      - iot-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:18083"]  # 使用EMQX管理API
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      EMQX_DASHBOARD__DEFAULT_USERNAME: "admin"  # 添加默认管理员账号
      EMQX_DASHBOARD__DEFAULT_PASSWORD: "pdd123456"  # 添加默认密码
      EMQX_NODE__COOKIE: "PhCirjn9j3q9zqZFqUyxUWdcEoCtoj5zloPg8zmCNyM="
      EMQX_LISTENER__TCP__EXTERNAL__BIND: 0.0.0.0:1883  # 监听所有 IP
      # EMQX_DASHBOARD__DEFAULT_RESPONSE_FORMAT: "json"  # 强制返回 JSON 格式

  tdengine:
    image: tdengine/tdengine:latest
    # command: ["taosd", "taosadapter"]  # 同时启动两个服务
    environment:
      TAOS_FQDN: "tdengine"
    volumes:
      - ./tdengine/data:/var/lib/taos
      - ./tdengine/udf:/etc/taos  # 挂载 UDF 配置文件路径
    ports:
      - "6041:6041"
      - "6043-6049:6043-6049/udp"
    networks:
      - iot-network
    healthcheck:
      test: ["CMD", "taos", "-h", "tdengine", "-s", "show databases;"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build: ./backend
    container_name: backend
    #command: gunicorn --worker-class eventlet -w 1 -b 0.0.0.0:5000 app:app
    command: gunicorn -c gunicorn.conf.py app:app
    environment:
      - FLASK_ENV=development
    ports:
      - "5000:5000"
    depends_on:
      tdengine:
        condition: service_healthy
      emqx:
        condition: service_started # 不强制要求健康检查
    networks:
      iot-network:
        aliases:
          - backend

  frontend:
    image: node:18
    working_dir: /app
    volumes:
      - ./frontend:/app  # 开发环境挂载代码
      - /app/node_modules  # 隔离容器内依赖
    ports:
      - "3000:3000"
    extra_hosts:
      - "iot.example.com:host-gateway"  # 前端也需要解析该域名（适用于Docker Desktop）
    command: sh -c "
      npm config set registry https://registry.npmmirror.com &&
      npm config set strict-ssl false &&
      npm install --force --legacy-peer-deps &&
      npm run dev"
    environment:
      NODE_OPTIONS: "--max-old-space-size=4096"
      npm_config_registry: "https://registry.npmmirror.com"
    networks:
      - iot-network

  nginx:
    image: nginx:latest
    extra_hosts:
      - "iot.example.com:host-gateway"  # 将域名指向宿主机IP（适用于Docker Desktop）
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro  # 文件 → 文件
      - ./nginx/ssl:/etc/ssl:ro  # 存放 SSL 证书的目录
      - ./nginx/tmp:/var/run/nginx  # 添加可写目录
    networks:
      - iot-network
    depends_on:
      - frontend
      - backend

networks:
  iot-network:
    name: iot-network
    driver: bridge
    attachable: true

volumes:
  taos_data:
